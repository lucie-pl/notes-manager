{
  "notes": [
    {
      "title": "React - Props",
      "content": "Props are data I can send to a component. You can send any kind of data : Objects, strings, numbers, arrays, jsx...\nYou can never modify a props directly they are read-only. Any time a component props changes the component re-render.\n\nExample : \n\n<Component myProps=\"This is a props\" />",
      "created_at": "23/08/2022",
      "id": 2
    },
    {
      "title": "React - States",
      "content": "A state is a data managed by a component. Any time a component state changes the component re-render",
      "created_at": "23/08/2022",
      "id": 5
    },
    {
      "title": "React - Hooks",
      "content": "Hooks are function that let you use states and other React features. \n\nuseEffect() and useState() are two famous React hooks. ",
      "created_at": "23/08/2022",
      "id": 6
    },
    {
      "title": "React - useEffect() ",
      "content": "The function passed to useEffect will run after the first render is committed to the screen.\nYou can pass an array as second parameter. useEffect() will run anytime a value in this array change.\nYou can return a function in useEffect() that will be executed when the component is removed from the DOM\n\nExample\n\nuseEffect( () => {\n   console.log(\"Run on first render\")\n}, [])\n\nuseEffect( () => {\n   console.log(\"Run on first render and when valueToListen changes\")\n}, [valueToListen])\n\nuseEffect( () => {\n   console.log(\"Run on first render\")\n   return () =>{\n        console.log(\"Run when component is removed from the DOM\")\n    }\n}, [])",
      "created_at": "23/08/2022",
      "id": 8
    },
    {
      "title": "React - useState()",
      "content": "useState is a React hooks that gives access to a value and a setter.\nAny time the setter is called the value is updated and the component re-render.\nYou can pass a default value to useState.\n\nExample :\n\nconst [value,setValue] = useState(\"defaultValue\")",
      "created_at": "23/08/2022",
      "id": 9
    },
    {
      "title": "Javascript - Destructuring",
      "content": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. \n\nExample :\n\nlet a, b, rest;\n[a, b] = [10, 20];\n\nconsole.log(a);\n// expected output: 10\n\nconsole.log(b);\n// expected output: 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\n\nconsole.log(rest);\n// expected output: Array [30,40,50]\n",
      "created_at": "13/10/2022",
      "id": 10
    },
    {
      "title": "Javascript - map()",
      "content": "The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.\n\nExample : \n\nconst array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]",
      "created_at": "13/10/2022",
      "id": 11
    },
    {
      "title": "React - useRef()",
      "content": "We declare a ref with the useRef() hook. We can set a default value. => ex: const cardCodeInput = useRef()\nTo access and modify a ref, we use the the .current=> ex: cardCodeInput.current\nThen we can call any function on that element. => ex: cardCodeInput.current.focus()\nWhen we modify it, the modifications apply inside the component but it won't re-render.\nTo store a ref, it happens during the first rendering and we need to apply the ref={cardCodeInput} in the HTML element.",
      "created_at": "13/03/2024",
      "id": 12
    },
    {
      "title": "Memo - useMemo()",
      "content": "A hook used to memorize values and not rerender the component if the value doesn't change, when the state of another element change.\nIt protects the function, and it will recall the function only if the value change.\n=> ex: const [value, setValue] = useState(1);\nconst result = useMemo( () => heavyCaculation(value), [value]);  (it will be recall only if value change)",
      "created_at": "2024-03-13",
      "id": 13
    },
    {
      "title": "Memo - memo()",
      "content": "It is kind of like useMemo() but on component, to avoid a component to rerender when a state change if nothing changes it the component.\nThe rerender of the component will happen only if the component's props change.",
      "created_at": "2024-03-13",
      "id": 14
    },
    {
      "title": "Memo - useCallback()",
      "content": "The hook useCallback returns a memoized callback function.\nThe useCallback and useMemo hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function.\nOne reason to use useCallback is to prevent a component from re-rendering unless its props have changed.\n\n/!\\ BUT because of \"referential equality\", every time a component re-renders, its functions get recreated. That's why we use useCallback()\n=> ex: \nconst addTodo = useCallback(() => {\n    setTodos((t) => [...t, \"New Todo\"]);\n  }, [todos]);\n",
      "created_at": "2024-03-13",
      "id": 15
    },
    {
      "title": "React - useReducer()",
      "content": "Allow to grouo all operations we may need on a state.\nIf you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.",
      "created_at": "2024-03-13",
      "id": 16
    }
  ]
}